applicationId=wam-test-framework
bootstrap-servers=kafka.dest.tanmay.wsn.riskfocus.com:9092

# Number of orders per second. Each order contains a list of allocations.
# Send orders only if > 0
wam.perf.ordersPerSec=0
# Number of prices per second. Send prices only if > 0
wam.perf.pricesPerSec=1000
# How long generate events
wam.perf.testDurationMillis=30000
# How many different accounts to use when generating sub-accounts
wam.perf.accountsCount=300
# How many different sub-accounts to use when generating allocations.
# Each account will have this exact number of sub-accounts generated
wam.perf.subAccountsCount=10
# Number of allocations per order. Actual count depends on how many different sub-accounts you use.
# Generator producing rate is hardly depends on this number. Having 300 allows to reach ~700 orders/sec locally
wam.perf.allocationsCount=300

# Usually you don't need to change  this
spring.main.web-application-type=none
spring.kafka.producer.acks=1
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.ByteArraySerializer
spring.kafka.producer.bootstrap-servers=${bootstrap-servers}
# IT test consumer settings
spring.kafka.consumer.group-id=wam-checker
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.ByteArrayDeserializer
spring.kafka.consumer.bootstrap-servers=${bootstrap-servers}
spring.kafka.consumer.fetch-max-wait=5000
spring.kafka.consumer.enable-auto-commit=false

#
spring.kafka.streams.applicationId=${applicationId}
spring.kafka.streams.bootstrapServers=${bootstrap-servers}
spring.kafka.streams.properties.num.stream.threads=4